===== Cycle 1 =====

Pipeline Stages:
  IF:
    Instruction: lw   $t0, 0($t1)
    pc: 4
  ID:
    Instruction: addi $t1, $zero, 4096
  EX:
    Instruction: {}
    RS: {} = {}
    RT: {} = {}
    control: {'is_nop': True}
  MEM:
    Instruction: None
    control: {'is_nop': True}
    alu_result: {}
  WB:
    Instruction: {}
    control: {'is_nop': True}
    dest_reg: {}

Registers:
  $sp: 16383

Memory:
  TEXT SEGMENT:
    TEXT[0x0]: addi $t1, $zero, 4096
    TEXT[0x4]: lw   $t0, 0($t1)
    TEXT[0x8]: add  $t2, $t0, $t0
    TEXT[0xc]: addi $t3, $t2, 5
  STATIC SEGMENT:
    STATIC[0x1000]: 10
==============================
===== Cycle 2 =====

Pipeline Stages:
  IF:
    Instruction: add  $t2, $t0, $t0
    pc: 8
  ID:
    Instruction: lw   $t0, 0($t1)
  EX:
    Instruction: addi $t1, $zero, 4096
    Binary: 001000 00000 01001 00010 00000 000000
    Binary Fields:
      opcode: 001000
      rs: 00000
      rt: 01001
      immediate: 0001000000000000
    RS: $zero = 0
    RT: {} = None
    control: {'opcode': 'addi', 'alu_op': 'ADD', 'mem_read': False, 'mem_write': False, 'reg_write': True, 'mem_to_reg': False, 'is_nop': False}
  MEM:
    Instruction: None
    control: {'is_nop': True}
    alu_result: {}
  WB:
    Instruction: {}
    control: {'is_nop': True}
    dest_reg: {}

Registers:
  $sp: 16383

Memory:
  TEXT SEGMENT:
    TEXT[0x0]: addi $t1, $zero, 4096
    TEXT[0x4]: lw   $t0, 0($t1)
    TEXT[0x8]: add  $t2, $t0, $t0
    TEXT[0xc]: addi $t3, $t2, 5
  STATIC SEGMENT:
    STATIC[0x1000]: 10
==============================
===== Cycle 3 =====

Pipeline Stages:
  IF:
    Instruction: addi $t3, $t2, 5
    pc: 12
  ID:
    Instruction: add  $t2, $t0, $t0
  EX:
    Instruction: lw   $t0, 0($t1)
    Binary: 100011 01001 01000 00000 00000 000000
    Binary Fields:
      opcode: 100011
      rs: 01001
      rt: 01000
      immediate: 0000000000000000
    RS: $t1 = 0
    RT: $t0 = 0
    control: {'opcode': 'lw', 'alu_op': 'ADD', 'mem_read': True, 'mem_write': False, 'reg_write': True, 'mem_to_reg': True, 'is_nop': False}
  MEM:
    Instruction: addi $t1, $zero, 4096
    control: {'opcode': 'addi', 'alu_op': 'ADD', 'mem_read': False, 'mem_write': False, 'reg_write': True, 'mem_to_reg': False, 'is_nop': False}
    alu_result: 4096
  WB:
    Instruction: {}
    control: {'is_nop': True}
    dest_reg: {}

Registers:
  $sp: 16383

Memory:
  TEXT SEGMENT:
    TEXT[0x0]: addi $t1, $zero, 4096
    TEXT[0x4]: lw   $t0, 0($t1)
    TEXT[0x8]: add  $t2, $t0, $t0
    TEXT[0xc]: addi $t3, $t2, 5
  STATIC SEGMENT:
    STATIC[0x1000]: 10
==============================
===== Cycle 4 =====

Pipeline Stages:
  IF:
    Instruction: addi $t3, $t2, 5
    pc: 12
  ID:
    Instruction: add  $t2, $t0, $t0
  EX:
    Instruction: lw   $t0, 0($t1)
    Binary: 100011 01001 01000 00000 00000 000000
    Binary Fields:
      opcode: 100011
      rs: 01001
      rt: 01000
      immediate: 0000000000000000
    RS: $t1 = 0
    RT: $t0 = 0
    control: {'opcode': 'lw', 'alu_op': 'ADD', 'mem_read': True, 'mem_write': False, 'reg_write': True, 'mem_to_reg': True, 'is_nop': False}
  MEM:
    Instruction: lw   $t0, 0($t1)
    control: {'opcode': 'lw', 'alu_op': 'ADD', 'mem_read': True, 'mem_write': False, 'reg_write': True, 'mem_to_reg': True, 'is_nop': False}
    alu_result: 4096
  WB:
    Instruction: addi $t1, $zero, 4096
    control: {'opcode': 'addi', 'alu_op': 'ADD', 'mem_read': False, 'mem_write': False, 'reg_write': True, 'mem_to_reg': False, 'is_nop': False}
    dest_reg: $t1

Registers:
  $sp: 16383

Memory:
  TEXT SEGMENT:
    TEXT[0x0]: addi $t1, $zero, 4096
    TEXT[0x4]: lw   $t0, 0($t1)
    TEXT[0x8]: add  $t2, $t0, $t0
    TEXT[0xc]: addi $t3, $t2, 5
  STATIC SEGMENT:
    STATIC[0x1000]: 10
==============================
===== Cycle 5 =====

Pipeline Stages:
  IF:
    Instruction: addi $t3, $t2, 5
    pc: 12
  ID:
    Instruction: add  $t2, $t0, $t0
  EX:
    Instruction: lw   $t0, 0($t1)
    Binary: 100011 01001 01000 00000 00000 000000
    Binary Fields:
      opcode: 100011
      rs: 01001
      rt: 01000
      immediate: 0000000000000000
    RS: $t1 = 0
    RT: $t0 = 0
    control: {'opcode': 'lw', 'alu_op': 'ADD', 'mem_read': True, 'mem_write': False, 'reg_write': True, 'mem_to_reg': True, 'is_nop': False}
  MEM:
    Instruction: lw   $t0, 0($t1)
    control: {'opcode': 'lw', 'alu_op': 'ADD', 'mem_read': True, 'mem_write': False, 'reg_write': True, 'mem_to_reg': True, 'is_nop': False}
    alu_result: 4096
  WB:
    Instruction: lw   $t0, 0($t1)
    control: {'opcode': 'lw', 'alu_op': 'ADD', 'mem_read': True, 'mem_write': False, 'reg_write': True, 'mem_to_reg': True, 'is_nop': False}
    dest_reg: $t0

Registers:
  $t1: 4096
  $sp: 16383

Memory:
  TEXT SEGMENT:
    TEXT[0x0]: addi $t1, $zero, 4096
    TEXT[0x4]: lw   $t0, 0($t1)
    TEXT[0x8]: add  $t2, $t0, $t0
    TEXT[0xc]: addi $t3, $t2, 5
  STATIC SEGMENT:
    STATIC[0x1000]: 10
==============================
===== Cycle 6 =====

Pipeline Stages:
  IF:
    Instruction: addi $t3, $t2, 5
    pc: 12
  ID:
    Instruction: add  $t2, $t0, $t0
  EX:
    Instruction: lw   $t0, 0($t1)
    Binary: 100011 01001 01000 00000 00000 000000
    Binary Fields:
      opcode: 100011
      rs: 01001
      rt: 01000
      immediate: 0000000000000000
    RS: $t1 = 0
    RT: $t0 = 0
    control: {'opcode': 'lw', 'alu_op': 'ADD', 'mem_read': True, 'mem_write': False, 'reg_write': True, 'mem_to_reg': True, 'is_nop': False}
  MEM:
    Instruction: lw   $t0, 0($t1)
    control: {'opcode': 'lw', 'alu_op': 'ADD', 'mem_read': True, 'mem_write': False, 'reg_write': True, 'mem_to_reg': True, 'is_nop': False}
    alu_result: 4096
  WB:
    Instruction: lw   $t0, 0($t1)
    control: {'opcode': 'lw', 'alu_op': 'ADD', 'mem_read': True, 'mem_write': False, 'reg_write': True, 'mem_to_reg': True, 'is_nop': False}
    dest_reg: $t0

Registers:
  $t0: 10
  $t1: 4096
  $sp: 16383

Memory:
  TEXT SEGMENT:
    TEXT[0x0]: addi $t1, $zero, 4096
    TEXT[0x4]: lw   $t0, 0($t1)
    TEXT[0x8]: add  $t2, $t0, $t0
    TEXT[0xc]: addi $t3, $t2, 5
  STATIC SEGMENT:
    STATIC[0x1000]: 10
==============================
===== Cycle 7 =====

Pipeline Stages:
  IF:
    Instruction: addi $t3, $t2, 5
    pc: 12
  ID:
    Instruction: add  $t2, $t0, $t0
  EX:
    Instruction: lw   $t0, 0($t1)
    Binary: 100011 01001 01000 00000 00000 000000
    Binary Fields:
      opcode: 100011
      rs: 01001
      rt: 01000
      immediate: 0000000000000000
    RS: $t1 = 0
    RT: $t0 = 0
    control: {'opcode': 'lw', 'alu_op': 'ADD', 'mem_read': True, 'mem_write': False, 'reg_write': True, 'mem_to_reg': True, 'is_nop': False}
  MEM:
    Instruction: lw   $t0, 0($t1)
    control: {'opcode': 'lw', 'alu_op': 'ADD', 'mem_read': True, 'mem_write': False, 'reg_write': True, 'mem_to_reg': True, 'is_nop': False}
    alu_result: 4096
  WB:
    Instruction: lw   $t0, 0($t1)
    control: {'opcode': 'lw', 'alu_op': 'ADD', 'mem_read': True, 'mem_write': False, 'reg_write': True, 'mem_to_reg': True, 'is_nop': False}
    dest_reg: $t0

Registers:
  $t0: 10
  $t1: 4096
  $sp: 16383

Memory:
  TEXT SEGMENT:
    TEXT[0x0]: addi $t1, $zero, 4096
    TEXT[0x4]: lw   $t0, 0($t1)
    TEXT[0x8]: add  $t2, $t0, $t0
    TEXT[0xc]: addi $t3, $t2, 5
  STATIC SEGMENT:
    STATIC[0x1000]: 10
==============================
