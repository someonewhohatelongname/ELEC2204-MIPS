===== Cycle 1 =====

Pipeline Stages:
  IF:
    Instruction: addi  $a0, $zero , 0
    pc: 4
  ID:
    Instruction: addi  $s0 , $zero, 4096
  EX:
    Instruction: {}
    RS: {} = {}
    RT: {} = {}
    control: {'is_nop': True}
  MEM:
    Instruction: None
    control: {'is_nop': True}
    alu_result: {}
  WB:
    Instruction: {}
    control: {'is_nop': True}
    dest_reg: {}

Registers:
  $sp: 16383
  $29: 16383

Memory:
  TEXT SEGMENT:
    TEXT[0x0]: addi  $s0 , $zero, 4096
    TEXT[0x4]: addi  $a0, $zero , 0
    TEXT[0x8]: sw    $a0, 0($s0)
    TEXT[0xc]: addi   $s0, $s0, 4
    TEXT[0x10]: addi  $a0, $zero , 1
    TEXT[0x14]: sw    $a0, 0($s0)
    TEXT[0x18]: addi   $s0, $s0, 4
    TEXT[0x1c]: addi  $a0, $zero , 2
    TEXT[0x20]: sll   $t0, $a0 , 1
    TEXT[0x24]: sw    $t0, 0($s0)
    TEXT[0x28]: addi   $s0, $s0, 4
    TEXT[0x2c]: addi  $a0, $zero , 3
    TEXT[0x30]: sll   $t0, $a0 , 1
    TEXT[0x34]: addi  $t0, $t0 , $a3
    TEXT[0x38]: sw    $t0, 0($s0)
    TEXT[0x3c]: addi   $s0, $s0, 4
  STATIC SEGMENT:
    STATIC[0x1000]: 100
==============================
===== Cycle 2 =====

Pipeline Stages:
  IF:
    Instruction: sw    $a0, 0($s0)
    pc: 8
  ID:
    Instruction: addi  $a0, $zero , 0
  EX:
    Instruction: addi  $s0 , $zero, 4096
    Binary: 001000 00000 10000 00010 00000 000000
    Binary Fields:
      opcode: 001000
      rs: 00000
      rt: 10000
      immediate: 0001000000000000
    RS: $zero = 0
    RT: {} = None
    control: {'opcode': 'addi', 'alu_op': 'ADD', 'mem_read': False, 'mem_write': False, 'reg_write': True, 'mem_to_reg': False, 'is_nop': False}
  MEM:
    Instruction: None
    control: {'is_nop': True}
    alu_result: {}
  WB:
    Instruction: {}
    control: {'is_nop': True}
    dest_reg: {}

Registers:
  $sp: 16383
  $29: 16383

Memory:
  TEXT SEGMENT:
    TEXT[0x0]: addi  $s0 , $zero, 4096
    TEXT[0x4]: addi  $a0, $zero , 0
    TEXT[0x8]: sw    $a0, 0($s0)
    TEXT[0xc]: addi   $s0, $s0, 4
    TEXT[0x10]: addi  $a0, $zero , 1
    TEXT[0x14]: sw    $a0, 0($s0)
    TEXT[0x18]: addi   $s0, $s0, 4
    TEXT[0x1c]: addi  $a0, $zero , 2
    TEXT[0x20]: sll   $t0, $a0 , 1
    TEXT[0x24]: sw    $t0, 0($s0)
    TEXT[0x28]: addi   $s0, $s0, 4
    TEXT[0x2c]: addi  $a0, $zero , 3
    TEXT[0x30]: sll   $t0, $a0 , 1
    TEXT[0x34]: addi  $t0, $t0 , $a3
    TEXT[0x38]: sw    $t0, 0($s0)
    TEXT[0x3c]: addi   $s0, $s0, 4
  STATIC SEGMENT:
    STATIC[0x1000]: 100
==============================
===== Cycle 3 =====

Pipeline Stages:
  IF:
    Instruction: addi   $s0, $s0, 4
    pc: 12
  ID:
    Instruction: sw    $a0, 0($s0)
  EX:
    Instruction: addi  $a0, $zero , 0
    Binary: 001000 00000 00100 00000 00000 000000
    Binary Fields:
      opcode: 001000
      rs: 00000
      rt: 00100
      immediate: 0000000000000000
    RS: $zero = 0
    RT: {} = None
    control: {'opcode': 'addi', 'alu_op': 'ADD', 'mem_read': False, 'mem_write': False, 'reg_write': True, 'mem_to_reg': False, 'is_nop': False}
  MEM:
    Instruction: addi  $s0 , $zero, 4096
    control: {'opcode': 'addi', 'alu_op': 'ADD', 'mem_read': False, 'mem_write': False, 'reg_write': True, 'mem_to_reg': False, 'is_nop': False}
    alu_result: 4096
  WB:
    Instruction: {}
    control: {'is_nop': True}
    dest_reg: {}

Registers:
  $sp: 16383
  $29: 16383

Memory:
  TEXT SEGMENT:
    TEXT[0x0]: addi  $s0 , $zero, 4096
    TEXT[0x4]: addi  $a0, $zero , 0
    TEXT[0x8]: sw    $a0, 0($s0)
    TEXT[0xc]: addi   $s0, $s0, 4
    TEXT[0x10]: addi  $a0, $zero , 1
    TEXT[0x14]: sw    $a0, 0($s0)
    TEXT[0x18]: addi   $s0, $s0, 4
    TEXT[0x1c]: addi  $a0, $zero , 2
    TEXT[0x20]: sll   $t0, $a0 , 1
    TEXT[0x24]: sw    $t0, 0($s0)
    TEXT[0x28]: addi   $s0, $s0, 4
    TEXT[0x2c]: addi  $a0, $zero , 3
    TEXT[0x30]: sll   $t0, $a0 , 1
    TEXT[0x34]: addi  $t0, $t0 , $a3
    TEXT[0x38]: sw    $t0, 0($s0)
    TEXT[0x3c]: addi   $s0, $s0, 4
  STATIC SEGMENT:
    STATIC[0x1000]: 100
==============================
===== Cycle 4 =====

Pipeline Stages:
  IF:
    Instruction: addi  $a0, $zero , 1
    pc: 16
  ID:
    Instruction: addi   $s0, $s0, 4
  EX:
    Instruction: sw    $a0, 0($s0)
    Binary: 101011 10000 00100 00000 00000 000000
    Binary Fields:
      opcode: 101011
      rs: 10000
      rt: 00100
      immediate: 0000000000000000
    RS: $s0 = 0
    RT: $a0 = 0
    control: {'opcode': 'sw', 'alu_op': 'ADD', 'mem_read': False, 'mem_write': True, 'reg_write': False, 'mem_to_reg': False, 'is_nop': False}
  MEM:
    Instruction: addi  $a0, $zero , 0
    control: {'opcode': 'addi', 'alu_op': 'ADD', 'mem_read': False, 'mem_write': False, 'reg_write': True, 'mem_to_reg': False, 'is_nop': False}
    alu_result: 0
  WB:
    Instruction: addi  $s0 , $zero, 4096
    control: {'opcode': 'addi', 'alu_op': 'ADD', 'mem_read': False, 'mem_write': False, 'reg_write': True, 'mem_to_reg': False, 'is_nop': False}
    dest_reg: $s0

Registers:
  $sp: 16383
  $29: 16383

Memory:
  TEXT SEGMENT:
    TEXT[0x0]: addi  $s0 , $zero, 4096
    TEXT[0x4]: addi  $a0, $zero , 0
    TEXT[0x8]: sw    $a0, 0($s0)
    TEXT[0xc]: addi   $s0, $s0, 4
    TEXT[0x10]: addi  $a0, $zero , 1
    TEXT[0x14]: sw    $a0, 0($s0)
    TEXT[0x18]: addi   $s0, $s0, 4
    TEXT[0x1c]: addi  $a0, $zero , 2
    TEXT[0x20]: sll   $t0, $a0 , 1
    TEXT[0x24]: sw    $t0, 0($s0)
    TEXT[0x28]: addi   $s0, $s0, 4
    TEXT[0x2c]: addi  $a0, $zero , 3
    TEXT[0x30]: sll   $t0, $a0 , 1
    TEXT[0x34]: addi  $t0, $t0 , $a3
    TEXT[0x38]: sw    $t0, 0($s0)
    TEXT[0x3c]: addi   $s0, $s0, 4
  STATIC SEGMENT:
    STATIC[0x1000]: 100
==============================
===== Cycle 5 =====

Pipeline Stages:
  IF:
    Instruction: sw    $a0, 0($s0)
    pc: 20
  ID:
    Instruction: addi  $a0, $zero , 1
  EX:
    Instruction: addi   $s0, $s0, 4
    Binary: 001000 10000 10000 00000 00000 000100
    Binary Fields:
      opcode: 001000
      rs: 10000
      rt: 10000
      immediate: 0000000000000100
    RS: $s0 = 4096
    RT: $a0 = None
    control: {'opcode': 'addi', 'alu_op': 'ADD', 'mem_read': False, 'mem_write': False, 'reg_write': True, 'mem_to_reg': False, 'is_nop': False}
  MEM:
    Instruction: sw    $a0, 0($s0)
    control: {'opcode': 'sw', 'alu_op': 'ADD', 'mem_read': False, 'mem_write': True, 'reg_write': False, 'mem_to_reg': False, 'is_nop': False}
    alu_result: 4096
  WB:
    Instruction: addi  $a0, $zero , 0
    control: {'opcode': 'addi', 'alu_op': 'ADD', 'mem_read': False, 'mem_write': False, 'reg_write': True, 'mem_to_reg': False, 'is_nop': False}
    dest_reg: $a0

Registers:
  $s0: 4096
  $16: 4096
  $sp: 16383
  $29: 16383

Memory:
  TEXT SEGMENT:
    TEXT[0x0]: addi  $s0 , $zero, 4096
    TEXT[0x4]: addi  $a0, $zero , 0
    TEXT[0x8]: sw    $a0, 0($s0)
    TEXT[0xc]: addi   $s0, $s0, 4
    TEXT[0x10]: addi  $a0, $zero , 1
    TEXT[0x14]: sw    $a0, 0($s0)
    TEXT[0x18]: addi   $s0, $s0, 4
    TEXT[0x1c]: addi  $a0, $zero , 2
    TEXT[0x20]: sll   $t0, $a0 , 1
    TEXT[0x24]: sw    $t0, 0($s0)
    TEXT[0x28]: addi   $s0, $s0, 4
    TEXT[0x2c]: addi  $a0, $zero , 3
    TEXT[0x30]: sll   $t0, $a0 , 1
    TEXT[0x34]: addi  $t0, $t0 , $a3
    TEXT[0x38]: sw    $t0, 0($s0)
    TEXT[0x3c]: addi   $s0, $s0, 4
  STATIC SEGMENT:
    STATIC[0x1000]: 100
==============================
===== Cycle 6 =====

Pipeline Stages:
  IF:
    Instruction: addi   $s0, $s0, 4
    pc: 24
  ID:
    Instruction: sw    $a0, 0($s0)
  EX:
    Instruction: addi  $a0, $zero , 1
    Binary: 001000 00000 00100 00000 00000 000001
    Binary Fields:
      opcode: 001000
      rs: 00000
      rt: 00100
      immediate: 0000000000000001
    RS: $zero = 0
    RT: $a0 = None
    control: {'opcode': 'addi', 'alu_op': 'ADD', 'mem_read': False, 'mem_write': False, 'reg_write': True, 'mem_to_reg': False, 'is_nop': False}
  MEM:
    Instruction: addi   $s0, $s0, 4
    control: {'opcode': 'addi', 'alu_op': 'ADD', 'mem_read': False, 'mem_write': False, 'reg_write': True, 'mem_to_reg': False, 'is_nop': False}
    alu_result: 4100
  WB:
    Instruction: sw    $a0, 0($s0)
    control: {'opcode': 'sw', 'alu_op': 'ADD', 'mem_read': False, 'mem_write': True, 'reg_write': False, 'mem_to_reg': False, 'is_nop': False}
    dest_reg: None

Registers:
  $s0: 4096
  $16: 4096
  $sp: 16383
  $29: 16383

Memory:
  TEXT SEGMENT:
    TEXT[0x0]: addi  $s0 , $zero, 4096
    TEXT[0x4]: addi  $a0, $zero , 0
    TEXT[0x8]: sw    $a0, 0($s0)
    TEXT[0xc]: addi   $s0, $s0, 4
    TEXT[0x10]: addi  $a0, $zero , 1
    TEXT[0x14]: sw    $a0, 0($s0)
    TEXT[0x18]: addi   $s0, $s0, 4
    TEXT[0x1c]: addi  $a0, $zero , 2
    TEXT[0x20]: sll   $t0, $a0 , 1
    TEXT[0x24]: sw    $t0, 0($s0)
    TEXT[0x28]: addi   $s0, $s0, 4
    TEXT[0x2c]: addi  $a0, $zero , 3
    TEXT[0x30]: sll   $t0, $a0 , 1
    TEXT[0x34]: addi  $t0, $t0 , $a3
    TEXT[0x38]: sw    $t0, 0($s0)
    TEXT[0x3c]: addi   $s0, $s0, 4
  STATIC SEGMENT:
    STATIC[0x1000]: 0
==============================
===== Cycle 7 =====

Pipeline Stages:
  IF:
    Instruction: addi  $a0, $zero , 2
    pc: 28
  ID:
    Instruction: addi   $s0, $s0, 4
  EX:
    Instruction: sw    $a0, 0($s0)
    Binary: 101011 10000 00100 00000 00000 000000
    Binary Fields:
      opcode: 101011
      rs: 10000
      rt: 00100
      immediate: 0000000000000000
    RS: $s0 = 4096
    RT: $a0 = 0
    control: {'opcode': 'sw', 'alu_op': 'ADD', 'mem_read': False, 'mem_write': True, 'reg_write': False, 'mem_to_reg': False, 'is_nop': False}
  MEM:
    Instruction: addi  $a0, $zero , 1
    control: {'opcode': 'addi', 'alu_op': 'ADD', 'mem_read': False, 'mem_write': False, 'reg_write': True, 'mem_to_reg': False, 'is_nop': False}
    alu_result: 1
  WB:
    Instruction: addi   $s0, $s0, 4
    control: {'opcode': 'addi', 'alu_op': 'ADD', 'mem_read': False, 'mem_write': False, 'reg_write': True, 'mem_to_reg': False, 'is_nop': False}
    dest_reg: $s0

Registers:
  $s0: 4096
  $16: 4096
  $sp: 16383
  $29: 16383

Memory:
  TEXT SEGMENT:
    TEXT[0x0]: addi  $s0 , $zero, 4096
    TEXT[0x4]: addi  $a0, $zero , 0
    TEXT[0x8]: sw    $a0, 0($s0)
    TEXT[0xc]: addi   $s0, $s0, 4
    TEXT[0x10]: addi  $a0, $zero , 1
    TEXT[0x14]: sw    $a0, 0($s0)
    TEXT[0x18]: addi   $s0, $s0, 4
    TEXT[0x1c]: addi  $a0, $zero , 2
    TEXT[0x20]: sll   $t0, $a0 , 1
    TEXT[0x24]: sw    $t0, 0($s0)
    TEXT[0x28]: addi   $s0, $s0, 4
    TEXT[0x2c]: addi  $a0, $zero , 3
    TEXT[0x30]: sll   $t0, $a0 , 1
    TEXT[0x34]: addi  $t0, $t0 , $a3
    TEXT[0x38]: sw    $t0, 0($s0)
    TEXT[0x3c]: addi   $s0, $s0, 4
  STATIC SEGMENT:
    STATIC[0x1000]: 0
==============================
===== Cycle 8 =====

Pipeline Stages:
  IF:
    Instruction: sll   $t0, $a0 , 1
    pc: 32
  ID:
    Instruction: addi  $a0, $zero , 2
  EX:
    Instruction: addi   $s0, $s0, 4
    Binary: 001000 10000 10000 00000 00000 000100
    Binary Fields:
      opcode: 001000
      rs: 10000
      rt: 10000
      immediate: 0000000000000100
    RS: $s0 = 4100
    RT: $a0 = None
    control: {'opcode': 'addi', 'alu_op': 'ADD', 'mem_read': False, 'mem_write': False, 'reg_write': True, 'mem_to_reg': False, 'is_nop': False}
  MEM:
    Instruction: sw    $a0, 0($s0)
    control: {'opcode': 'sw', 'alu_op': 'ADD', 'mem_read': False, 'mem_write': True, 'reg_write': False, 'mem_to_reg': False, 'is_nop': False}
    alu_result: 4100
  WB:
    Instruction: addi  $a0, $zero , 1
    control: {'opcode': 'addi', 'alu_op': 'ADD', 'mem_read': False, 'mem_write': False, 'reg_write': True, 'mem_to_reg': False, 'is_nop': False}
    dest_reg: $a0

Registers:
  $s0: 4100
  $16: 4100
  $sp: 16383
  $29: 16383

Memory:
  TEXT SEGMENT:
    TEXT[0x0]: addi  $s0 , $zero, 4096
    TEXT[0x4]: addi  $a0, $zero , 0
    TEXT[0x8]: sw    $a0, 0($s0)
    TEXT[0xc]: addi   $s0, $s0, 4
    TEXT[0x10]: addi  $a0, $zero , 1
    TEXT[0x14]: sw    $a0, 0($s0)
    TEXT[0x18]: addi   $s0, $s0, 4
    TEXT[0x1c]: addi  $a0, $zero , 2
    TEXT[0x20]: sll   $t0, $a0 , 1
    TEXT[0x24]: sw    $t0, 0($s0)
    TEXT[0x28]: addi   $s0, $s0, 4
    TEXT[0x2c]: addi  $a0, $zero , 3
    TEXT[0x30]: sll   $t0, $a0 , 1
    TEXT[0x34]: addi  $t0, $t0 , $a3
    TEXT[0x38]: sw    $t0, 0($s0)
    TEXT[0x3c]: addi   $s0, $s0, 4
  STATIC SEGMENT:
    STATIC[0x1000]: 0
==============================
===== Cycle 9 =====

Pipeline Stages:
  IF:
    Instruction: sw    $t0, 0($s0)
    pc: 36
  ID:
    Instruction: sll   $t0, $a0 , 1
  EX:
    Instruction: addi  $a0, $zero , 2
    Binary: 001000 00000 00100 00000 00000 000010
    Binary Fields:
      opcode: 001000
      rs: 00000
      rt: 00100
      immediate: 0000000000000010
    RS: $zero = 0
    RT: $a0 = None
    control: {'opcode': 'addi', 'alu_op': 'ADD', 'mem_read': False, 'mem_write': False, 'reg_write': True, 'mem_to_reg': False, 'is_nop': False}
  MEM:
    Instruction: addi   $s0, $s0, 4
    control: {'opcode': 'addi', 'alu_op': 'ADD', 'mem_read': False, 'mem_write': False, 'reg_write': True, 'mem_to_reg': False, 'is_nop': False}
    alu_result: 4104
  WB:
    Instruction: sw    $a0, 0($s0)
    control: {'opcode': 'sw', 'alu_op': 'ADD', 'mem_read': False, 'mem_write': True, 'reg_write': False, 'mem_to_reg': False, 'is_nop': False}
    dest_reg: None

Registers:
  $a0: 1
  $4: 1
  $s0: 4100
  $16: 4100
  $sp: 16383
  $29: 16383

Memory:
  TEXT SEGMENT:
    TEXT[0x0]: addi  $s0 , $zero, 4096
    TEXT[0x4]: addi  $a0, $zero , 0
    TEXT[0x8]: sw    $a0, 0($s0)
    TEXT[0xc]: addi   $s0, $s0, 4
    TEXT[0x10]: addi  $a0, $zero , 1
    TEXT[0x14]: sw    $a0, 0($s0)
    TEXT[0x18]: addi   $s0, $s0, 4
    TEXT[0x1c]: addi  $a0, $zero , 2
    TEXT[0x20]: sll   $t0, $a0 , 1
    TEXT[0x24]: sw    $t0, 0($s0)
    TEXT[0x28]: addi   $s0, $s0, 4
    TEXT[0x2c]: addi  $a0, $zero , 3
    TEXT[0x30]: sll   $t0, $a0 , 1
    TEXT[0x34]: addi  $t0, $t0 , $a3
    TEXT[0x38]: sw    $t0, 0($s0)
    TEXT[0x3c]: addi   $s0, $s0, 4
  STATIC SEGMENT:
    STATIC[0x1000]: 0
    STATIC[0x1004]: 1
==============================
===== Cycle 10 =====

Pipeline Stages:
  IF:
    Instruction: addi   $s0, $s0, 4
    pc: 40
  ID:
    Instruction: sw    $t0, 0($s0)
  EX:
    Instruction: sll   $t0, $a0 , 1
    Binary: 000000 00000 00100 01000 00000 000000
    Binary Fields:
      opcode: 000000
      rs: 00000
      rt: 00100
      rd: 01000
      shamt: 00000
      funct: 000000
    RS: $zero = None
    RT: $a0 = 1
    control: {'opcode': 'sll', 'alu_op': 'SLL', 'mem_read': False, 'mem_write': False, 'reg_write': True, 'mem_to_reg': False, 'is_nop': False}
  MEM:
    Instruction: addi  $a0, $zero , 2
    control: {'opcode': 'addi', 'alu_op': 'ADD', 'mem_read': False, 'mem_write': False, 'reg_write': True, 'mem_to_reg': False, 'is_nop': False}
    alu_result: 2
  WB:
    Instruction: addi   $s0, $s0, 4
    control: {'opcode': 'addi', 'alu_op': 'ADD', 'mem_read': False, 'mem_write': False, 'reg_write': True, 'mem_to_reg': False, 'is_nop': False}
    dest_reg: $s0

Registers:
  $a0: 1
  $4: 1
  $s0: 4100
  $16: 4100
  $sp: 16383
  $29: 16383

Memory:
  TEXT SEGMENT:
    TEXT[0x0]: addi  $s0 , $zero, 4096
    TEXT[0x4]: addi  $a0, $zero , 0
    TEXT[0x8]: sw    $a0, 0($s0)
    TEXT[0xc]: addi   $s0, $s0, 4
    TEXT[0x10]: addi  $a0, $zero , 1
    TEXT[0x14]: sw    $a0, 0($s0)
    TEXT[0x18]: addi   $s0, $s0, 4
    TEXT[0x1c]: addi  $a0, $zero , 2
    TEXT[0x20]: sll   $t0, $a0 , 1
    TEXT[0x24]: sw    $t0, 0($s0)
    TEXT[0x28]: addi   $s0, $s0, 4
    TEXT[0x2c]: addi  $a0, $zero , 3
    TEXT[0x30]: sll   $t0, $a0 , 1
    TEXT[0x34]: addi  $t0, $t0 , $a3
    TEXT[0x38]: sw    $t0, 0($s0)
    TEXT[0x3c]: addi   $s0, $s0, 4
  STATIC SEGMENT:
    STATIC[0x1000]: 0
    STATIC[0x1004]: 1
==============================
===== Cycle 11 =====

Pipeline Stages:
  IF:
    Instruction: addi  $a0, $zero , 3
    pc: 44
  ID:
    Instruction: addi   $s0, $s0, 4
  EX:
    Instruction: sw    $t0, 0($s0)
    Binary: 101011 10000 01000 00000 00000 000000
    Binary Fields:
      opcode: 101011
      rs: 10000
      rt: 01000
      immediate: 0000000000000000
    RS: $s0 = 4104
    RT: $t0 = 0
    control: {'opcode': 'sw', 'alu_op': 'ADD', 'mem_read': False, 'mem_write': True, 'reg_write': False, 'mem_to_reg': False, 'is_nop': False}
  MEM:
    Instruction: sll   $t0, $a0 , 1
    control: {'opcode': 'sll', 'alu_op': 'SLL', 'mem_read': False, 'mem_write': False, 'reg_write': True, 'mem_to_reg': False, 'is_nop': False}
    alu_result: 4
  WB:
    Instruction: addi  $a0, $zero , 2
    control: {'opcode': 'addi', 'alu_op': 'ADD', 'mem_read': False, 'mem_write': False, 'reg_write': True, 'mem_to_reg': False, 'is_nop': False}
    dest_reg: $a0

Registers:
  $a0: 1
  $4: 1
  $s0: 4104
  $16: 4104
  $sp: 16383
  $29: 16383

Memory:
  TEXT SEGMENT:
    TEXT[0x0]: addi  $s0 , $zero, 4096
    TEXT[0x4]: addi  $a0, $zero , 0
    TEXT[0x8]: sw    $a0, 0($s0)
    TEXT[0xc]: addi   $s0, $s0, 4
    TEXT[0x10]: addi  $a0, $zero , 1
    TEXT[0x14]: sw    $a0, 0($s0)
    TEXT[0x18]: addi   $s0, $s0, 4
    TEXT[0x1c]: addi  $a0, $zero , 2
    TEXT[0x20]: sll   $t0, $a0 , 1
    TEXT[0x24]: sw    $t0, 0($s0)
    TEXT[0x28]: addi   $s0, $s0, 4
    TEXT[0x2c]: addi  $a0, $zero , 3
    TEXT[0x30]: sll   $t0, $a0 , 1
    TEXT[0x34]: addi  $t0, $t0 , $a3
    TEXT[0x38]: sw    $t0, 0($s0)
    TEXT[0x3c]: addi   $s0, $s0, 4
  STATIC SEGMENT:
    STATIC[0x1000]: 0
    STATIC[0x1004]: 1
==============================
===== Cycle 12 =====

Pipeline Stages:
  IF:
    Instruction: sll   $t0, $a0 , 1
    pc: 48
  ID:
    Instruction: addi  $a0, $zero , 3
  EX:
    Instruction: addi   $s0, $s0, 4
    Binary: 001000 10000 10000 00000 00000 000100
    Binary Fields:
      opcode: 001000
      rs: 10000
      rt: 10000
      immediate: 0000000000000100
    RS: $s0 = 4104
    RT: $t0 = None
    control: {'opcode': 'addi', 'alu_op': 'ADD', 'mem_read': False, 'mem_write': False, 'reg_write': True, 'mem_to_reg': False, 'is_nop': False}
  MEM:
    Instruction: sw    $t0, 0($s0)
    control: {'opcode': 'sw', 'alu_op': 'ADD', 'mem_read': False, 'mem_write': True, 'reg_write': False, 'mem_to_reg': False, 'is_nop': False}
    alu_result: 4104
  WB:
    Instruction: sll   $t0, $a0 , 1
    control: {'opcode': 'sll', 'alu_op': 'SLL', 'mem_read': False, 'mem_write': False, 'reg_write': True, 'mem_to_reg': False, 'is_nop': False}
    dest_reg: $t0

Registers:
  $a0: 2
  $4: 2
  $s0: 4104
  $16: 4104
  $sp: 16383
  $29: 16383

Memory:
  TEXT SEGMENT:
    TEXT[0x0]: addi  $s0 , $zero, 4096
    TEXT[0x4]: addi  $a0, $zero , 0
    TEXT[0x8]: sw    $a0, 0($s0)
    TEXT[0xc]: addi   $s0, $s0, 4
    TEXT[0x10]: addi  $a0, $zero , 1
    TEXT[0x14]: sw    $a0, 0($s0)
    TEXT[0x18]: addi   $s0, $s0, 4
    TEXT[0x1c]: addi  $a0, $zero , 2
    TEXT[0x20]: sll   $t0, $a0 , 1
    TEXT[0x24]: sw    $t0, 0($s0)
    TEXT[0x28]: addi   $s0, $s0, 4
    TEXT[0x2c]: addi  $a0, $zero , 3
    TEXT[0x30]: sll   $t0, $a0 , 1
    TEXT[0x34]: addi  $t0, $t0 , $a3
    TEXT[0x38]: sw    $t0, 0($s0)
    TEXT[0x3c]: addi   $s0, $s0, 4
  STATIC SEGMENT:
    STATIC[0x1000]: 0
    STATIC[0x1004]: 1
==============================
===== Cycle 13 =====

Pipeline Stages:
  IF:
    Instruction: addi  $t0, $t0 , $a3
    pc: 52
  ID:
    Instruction: sll   $t0, $a0 , 1
  EX:
    Instruction: addi  $a0, $zero , 3
    Binary: 001000 00000 00100 00000 00000 000011
    Binary Fields:
      opcode: 001000
      rs: 00000
      rt: 00100
      immediate: 0000000000000011
    RS: $zero = 0
    RT: $t0 = None
    control: {'opcode': 'addi', 'alu_op': 'ADD', 'mem_read': False, 'mem_write': False, 'reg_write': True, 'mem_to_reg': False, 'is_nop': False}
  MEM:
    Instruction: addi   $s0, $s0, 4
    control: {'opcode': 'addi', 'alu_op': 'ADD', 'mem_read': False, 'mem_write': False, 'reg_write': True, 'mem_to_reg': False, 'is_nop': False}
    alu_result: 4108
  WB:
    Instruction: sw    $t0, 0($s0)
    control: {'opcode': 'sw', 'alu_op': 'ADD', 'mem_read': False, 'mem_write': True, 'reg_write': False, 'mem_to_reg': False, 'is_nop': False}
    dest_reg: None

Registers:
  $a0: 2
  $4: 2
  $t0: 4
  $8: 4
  $s0: 4104
  $16: 4104
  $sp: 16383
  $29: 16383

Memory:
  TEXT SEGMENT:
    TEXT[0x0]: addi  $s0 , $zero, 4096
    TEXT[0x4]: addi  $a0, $zero , 0
    TEXT[0x8]: sw    $a0, 0($s0)
    TEXT[0xc]: addi   $s0, $s0, 4
    TEXT[0x10]: addi  $a0, $zero , 1
    TEXT[0x14]: sw    $a0, 0($s0)
    TEXT[0x18]: addi   $s0, $s0, 4
    TEXT[0x1c]: addi  $a0, $zero , 2
    TEXT[0x20]: sll   $t0, $a0 , 1
    TEXT[0x24]: sw    $t0, 0($s0)
    TEXT[0x28]: addi   $s0, $s0, 4
    TEXT[0x2c]: addi  $a0, $zero , 3
    TEXT[0x30]: sll   $t0, $a0 , 1
    TEXT[0x34]: addi  $t0, $t0 , $a3
    TEXT[0x38]: sw    $t0, 0($s0)
    TEXT[0x3c]: addi   $s0, $s0, 4
  STATIC SEGMENT:
    STATIC[0x1000]: 0
    STATIC[0x1004]: 1
    STATIC[0x1008]: 4
==============================
===== Cycle 14 =====

Pipeline Stages:
  IF:
    Instruction: sw    $t0, 0($s0)
    pc: 56
  ID:
    Instruction: addi  $t0, $t0 , $a3
  EX:
    Instruction: sll   $t0, $a0 , 1
    Binary: 000000 00000 00100 01000 00000 000000
    Binary Fields:
      opcode: 000000
      rs: 00000
      rt: 00100
      rd: 01000
      shamt: 00000
      funct: 000000
    RS: $zero = None
    RT: $a0 = 2
    control: {'opcode': 'sll', 'alu_op': 'SLL', 'mem_read': False, 'mem_write': False, 'reg_write': True, 'mem_to_reg': False, 'is_nop': False}
  MEM:
    Instruction: addi  $a0, $zero , 3
    control: {'opcode': 'addi', 'alu_op': 'ADD', 'mem_read': False, 'mem_write': False, 'reg_write': True, 'mem_to_reg': False, 'is_nop': False}
    alu_result: 3
  WB:
    Instruction: addi   $s0, $s0, 4
    control: {'opcode': 'addi', 'alu_op': 'ADD', 'mem_read': False, 'mem_write': False, 'reg_write': True, 'mem_to_reg': False, 'is_nop': False}
    dest_reg: $s0

Registers:
  $a0: 2
  $4: 2
  $t0: 4
  $8: 4
  $s0: 4104
  $16: 4104
  $sp: 16383
  $29: 16383

Memory:
  TEXT SEGMENT:
    TEXT[0x0]: addi  $s0 , $zero, 4096
    TEXT[0x4]: addi  $a0, $zero , 0
    TEXT[0x8]: sw    $a0, 0($s0)
    TEXT[0xc]: addi   $s0, $s0, 4
    TEXT[0x10]: addi  $a0, $zero , 1
    TEXT[0x14]: sw    $a0, 0($s0)
    TEXT[0x18]: addi   $s0, $s0, 4
    TEXT[0x1c]: addi  $a0, $zero , 2
    TEXT[0x20]: sll   $t0, $a0 , 1
    TEXT[0x24]: sw    $t0, 0($s0)
    TEXT[0x28]: addi   $s0, $s0, 4
    TEXT[0x2c]: addi  $a0, $zero , 3
    TEXT[0x30]: sll   $t0, $a0 , 1
    TEXT[0x34]: addi  $t0, $t0 , $a3
    TEXT[0x38]: sw    $t0, 0($s0)
    TEXT[0x3c]: addi   $s0, $s0, 4
  STATIC SEGMENT:
    STATIC[0x1000]: 0
    STATIC[0x1004]: 1
    STATIC[0x1008]: 4
==============================
